@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_WITH_LEGEND()

System_Boundary(s1, "Student Information System") {
    Person(students, "Students", "Need access to academic records, course enrollment, and transcripts.")
    Person(faculty, "Faculty", "Require tools for grade submission and tracking changes.")
    Person(adminStaff, "Administrative Staff", "Manage student records and ensure compliance.")
    Person(itSupport, "IT Support Staff", "Ensure system uptime and performance.")

    System_Ext(ims, "Identity Management System (IMS)", "For user authentication and access control.")
    System_Ext(lms, "Learning Management System (LMS)", "For course content integration and grade updates.")
    System_Ext(paymentSystem, "Payment Processing System", "For handling tuition payments.")
    System_Ext(complianceSystem, "Compliance and Reporting Systems", "For regulatory reporting.")
    System_Ext(externalAcademicSystems, "External Academic Systems", "For state and federal compliance reporting.")

    Container(webApp, "Web Application", "React.js or Angular", "User interface for students, faculty, and administrative staff.")
    Container(apiGateway, "API Gateway", "Google Cloud Endpoints or Apigee", "Centralized entry point for client requests.")
    Container(studentInfoAPI, "Student Information API", "Node.js with Express or Spring Boot", "Manages student demographic and academic records.")
    Container(enrollmentAPI, "Enrollment Management API", "Python with Flask or .NET Core", "Handles course enrollment and wait-listing.")
    Container(gradeAPI, "Grade Management API", "Ruby on Rails or Java with Spring", "For faculty to submit grades and track changes.")
    Container(docGenService, "Document Generation Service", "Java with Apache PDFBox or Python with ReportLab", "Generates official transcripts in PDF format.")
    Container(database, "Database", "Google Cloud SQL (PostgreSQL or MySQL)", "Relational database for storing records.")
    Container(messageQueue, "Message Queue", "Google Cloud Pub/Sub", "Messaging system for asynchronous communication.")
}

Rel(students, webApp, "Access academic records, enroll in courses, and request transcripts.", "HTTPS")
Rel(faculty, webApp, "Submit grades and track changes.", "HTTPS")
Rel(adminStaff, webApp, "Manage student records and ensure compliance.", "HTTPS")
Rel(itSupport, webApp, "Monitor system uptime and performance.", "HTTPS")
Rel(webApp, apiGateway, "Sends requests for data and operations.", "HTTPS")
Rel(apiGateway, studentInfoAPI, "Routes requests to manage student records.", "HTTPS")
Rel(apiGateway, enrollmentAPI, "Routes requests for course enrollment.", "HTTPS")
Rel(apiGateway, gradeAPI, "Routes requests for grade submissions.", "HTTPS")
Rel(apiGateway, docGenService, "Routes requests to generate transcripts.", "HTTPS")
Rel(studentInfoAPI, database, "CRUD operations for student records.", "SQL")
Rel(enrollmentAPI, database, "CRUD operations for course registrations.", "SQL")
Rel(gradeAPI, database, "CRUD operations for grades.", "SQL")
Rel(docGenService, database, "Retrieving records for transcripts.", "SQL")
Rel(gradeAPI, lms, "Synchronizes grades.", "API")
Rel(enrollmentAPI, lms, "Sends course registration data.", "API")
Rel(studentInfoAPI, messageQueue, "Handles events for asynchronous processing.", "Pub/Sub")