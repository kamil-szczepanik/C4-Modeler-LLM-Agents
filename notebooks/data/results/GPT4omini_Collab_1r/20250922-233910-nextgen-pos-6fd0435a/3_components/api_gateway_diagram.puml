@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
LAYOUT_WITH_LEGEND()

System_Boundary(api_gateway, "API Gateway") {
    Component(api_controller, "API Controller", "Node.js, Express", "Handle incoming HTTP requests, route requests, validate data, handle authentication/authorization.")
    Component(service_layer, "Service Layer", "Node.js, Express", "Encapsulate business logic, interact with the repository layer, coordinate between services.")
    Component(transaction_service, "TransactionService", "Node.js, Express", "Manages scanning items, computing totals, applying promotions.")
    Component(payment_service, "PaymentService", "Node.js, Express", "Handles payment processing via Stripe Terminal.")
    Component(receipt_service, "ReceiptService", "Node.js, Express", "Manages receipt generation and delivery.")
    Component(repository_layer, "Repository Layer", "Node.js, Express", "Abstract data access logic, provide methods for CRUD operations.")
    Component(transaction_repository, "TransactionRepository", "Node.js, Express", "Handles transaction data.")
    Component(promotion_repository, "PromotionRepository", "Node.js, Express", "Manages promotion data.")
    Component(receipt_repository, "ReceiptRepository", "Node.js, Express", "Stores receipt data.")
    Component(domain_model, "Domain Model", "Node.js, Express", "Define core entities and relationships, represent business rules.")
    Component(transaction, "Transaction", "Node.js, Express", "Represents a sale transaction.")
    Component(promotion, "Promotion", "Node.js, Express", "Represents promotional offers.")
    Component(receipt, "Receipt", "Node.js, Express", "Represents receipt details.")
}

Rel(api_controller, service_layer, "Interacts with")
Rel(service_layer, repository_layer, "Communicates with")
Rel(service_layer, domain_model, "Utilizes")