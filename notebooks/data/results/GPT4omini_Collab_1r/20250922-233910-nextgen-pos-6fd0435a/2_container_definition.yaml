level: container
scope: "Container diagram for NextGen Point-of-Sale"
system:
  name: "NextGen Point-of-Sale"
elements:
  - type: "person"
    name: "Cashier"
    description: "The user responsible for processing sales transactions, managing payments, and applying promotions during the checkout process."
  - type: "externalSystem"
    name: "Stripe Terminal"
    description: "An external payment processing system that handles secure transactions and ensures compliance with PCI-DSS standards."
  - type: "externalSystem"
    name: "Email Service Provider"
    description: "An external service (e.g., SendGrid) used for sending email receipts to customers after transactions."
  - type: "container"
    name: "Frontend Web Application"
    technology: "React.js"
    description: "A responsive web application built with React.js that handles user interactions and communicates with the backend API."
  - type: "container"
    name: "API Gateway"
    technology: "Node.js, Express"
    description: "Node.js and Express-based API that handles authentication and routes requests to microservices."
  - type: "container"
    name: "Transaction Management Service"
    technology: "Node.js, Express"
    description: "Microservice for managing transactions, processing item scans, and applying promotions."
  - type: "container"
    name: "Payment Processing Service"
    technology: "Node.js, Express"
    description: "Microservice for payment processing via Stripe, integrating with Stripe's SDK."
  - type: "container"
    name: "Receipt Generation Service"
    technology: "Node.js, Express"
    description: "Microservice for generating and sending receipts, integrating with email service."
  - type: "container"
    name: "Database"
    technology: "PostgreSQL, Redis"
    description: "PostgreSQL database with Redis for caching, storing transaction data and promotions."
  - type: "container"
    name: "Local Storage Service"
    technology: "SQLite"
    description: "SQLite database for offline transaction buffering, storing transactions locally during outages."
  - type: "container"
    name: "Monitoring and Logging Service"
    technology: "AWS CloudWatch"
    description: "Service for collecting logs and metrics, monitoring performance, and logging transactions."
relationships:
  - source: "Cashier"
    destination: "Frontend Web Application"
    description: "Uses"
    technology: "HTTPS"
  - source: "Frontend Web Application"
    destination: "API Gateway"
    description: "Communicates with"
    technology: "HTTPS"
  - source: "API Gateway"
    destination: "Transaction Management Service"
    description: "Routes requests to"
    technology: "RESTful API over HTTPS"
  - source: "API Gateway"
    destination: "Payment Processing Service"
    description: "Routes requests to"
    technology: "RESTful API over HTTPS"
  - source: "Transaction Management Service"
    destination: "Database"
    description: "Stores transaction data in"
    technology: "SQL"
  - source: "Payment Processing Service"
    destination: "Stripe Terminal"
    description: "Integrates with"
    technology: "HTTPS"
  - source: "Receipt Generation Service"
    destination: "Email Service Provider"
    description: "Sends email requests for receipt delivery to"
    technology: "HTTPS"
  - source: "Monitoring and Logging Service"
    destination: "All Services"
    description: "Monitors and logs"
    technology: "AWS SDK"