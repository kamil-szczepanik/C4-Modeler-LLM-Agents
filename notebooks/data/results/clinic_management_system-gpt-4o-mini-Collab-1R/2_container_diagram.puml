@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_WITH_LEGEND()

Person(ha, "Healthcare Administrators", "Responsible for overseeing clinic operations and ensuring efficient management of resources.")
Person(ms, "Medical Staff", "Provide patient care and require immediate access to patient information.")
Person(p, "Patients", "Seek to manage their appointments and billing transparently.")
Person(bs, "Billing Specialists", "Handle billing processes and need efficient workflows to manage claims.")

System_Boundary(s1, "Clinic Management System") {
    Container(webApp, "Web Application", "React.js or Angular", "A user-friendly interface for healthcare administrators, medical staff, patients, and billing specialists to interact with the system.")
    Container(apiGateway, "API Gateway", "Kong or AWS API Gateway", "Acts as a single entry point for all client requests, routing them to the appropriate microservices.")
    Container(patientService, "Patient Management Service", "Node.js with Express or Spring Boot", "Manages patient registration, demographic data, and related functionalities.")
    Container(appointmentService, "Appointment Scheduling Service", "Node.js with Express or Spring Boot", "Handles appointment scheduling, resource clash checks, and notifications.")
    Container(emrService, "Electronic Medical Records (EMR) Service", ".NET Core or Java Spring Boot with NoSQL", "Manages electronic medical records, including data storage, retrieval, and audit trails.")
    Container(billingService, "Billing and Insurance Service", "Python with Flask or Java Spring Boot", "Manages billing processes, insurance claim submissions, and tracking.")
    Container(database, "Database", "PostgreSQL or MySQL", "Centralized data storage for all services, ensuring compliance with data retention policies.")
    Container(messageQueue, "Message Queue", "RabbitMQ or Apache Kafka", "Facilitates asynchronous communication between services.")
    Container(authService, "Authentication Service", "OAuth 2.0 with IdentityServer or Auth0", "Manages user authentication and authorization, including multi-factor authentication.")
}

Rel(ha, webApp, "Uses", "HTTPS")
Rel(ms, webApp, "Uses", "HTTPS")
Rel(p, webApp, "Interacts with", "HTTPS")
Rel(bs, webApp, "Utilizes", "HTTPS")
Rel(webApp, apiGateway, "Communicates with", "RESTful APIs")
Rel(apiGateway, patientService, "Routes requests to", "RESTful APIs")
Rel(apiGateway, appointmentService, "Routes requests to", "RESTful APIs")
Rel(apiGateway, emrService, "Routes requests to", "RESTful APIs")
Rel(apiGateway, billingService, "Routes requests to", "RESTful APIs")
Rel(patientService, database, "Communicates with", "Direct database connections")
Rel(appointmentService, database, "Communicates with", "Direct database connections")
Rel(emrService, database, "Communicates with", "Direct database connections")
Rel(billingService, database, "Communicates with", "Direct database connections")
Rel(appointmentService, messageQueue, "Uses for notifications", "Publish/Subscribe model")
Rel(billingService, messageQueue, "Uses for notifications", "Publish/Subscribe model")
Rel(apiGateway, authService, "Calls to validate user credentials", "RESTful APIs")
@enduml